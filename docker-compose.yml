version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: aitest-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aitest}
      POSTGRES_USER: ${POSTGRES_USER:-aitest}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aitest123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aitest"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: aitest-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI 后端服务
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aitest-api
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-aitest}
      - POSTGRES_USER=${POSTGRES_USER:-aitest}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aitest123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-https://api.openai.com/v1}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - AI_PROVIDER=${AI_PROVIDER:-openai}
      - GIT_USERNAME=${GIT_USERNAME:-}
      - GIT_TOKEN=${GIT_TOKEN:-}
    volumes:
      - ./backend:/app
      - workspace_data:/app/workspace
      - reports_data:/app/reports
      - ~/.ssh/id_rsa:/root/.ssh/id_rsa:ro
      - ~/.ssh/known_hosts:/root/.ssh/known_hosts:ro
      - ./ssh_config:/root/.ssh/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker - 执行后台任务
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aitest-celery-worker
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-aitest}
      - POSTGRES_USER=${POSTGRES_USER:-aitest}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aitest123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-https://api.openai.com/v1}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - AI_PROVIDER=${AI_PROVIDER:-openai}
      - GIT_USERNAME=${GIT_USERNAME:-}
      - GIT_TOKEN=${GIT_TOKEN:-}
      - GOPRIVATE=bt.xxxcloud.com/*
      - GONOSUMDB=bt.xxxcloud.com/*
      # - GOPROXY=https://goproxy.cn,direct
    volumes:
      - ./backend:/app
      - workspace_data:/app/workspace
      - reports_data:/app/reports
      - ~/.ssh/id_rsa:/root/.ssh/id_rsa:ro
      - ~/.ssh/known_hosts:/root/.ssh/known_hosts:ro
      - ./ssh_config:/root/.ssh/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.worker.celery_app worker --loglevel=info --concurrency=4

  # Celery Beat - 定时任务调度
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aitest-celery-beat
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-aitest}
      - POSTGRES_USER=${POSTGRES_USER:-aitest}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-aitest123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.worker.celery_app beat --loglevel=info

  # Flower - Celery监控界面
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aitest-flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    command: celery -A app.worker.celery_app flower --port=5555

volumes:
  postgres_data:
  redis_data:
  workspace_data:
  reports_data:

