# AI Test Agent 环境变量配置模板
# 使用方法: cp env.example .env
# 然后编辑 .env 文件填写实际值

# ==================== API配置 ====================
API_HOST=0.0.0.0
API_PORT=8000
API_SECRET_KEY=change-this-secret-key-in-production

# ==================== 数据库配置 ====================
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=aitest
POSTGRES_USER=aitest
POSTGRES_PASSWORD=aitest123
# ⚠️ 生产环境请修改为强密码！

# ==================== Redis配置 ====================
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=
# 生产环境建议设置密码

# ==================== Celery配置 ====================
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=redis://redis:6379/0

# ==================== AI模型配置 ====================
# AI提供商选择: openai, anthropic, local
AI_PROVIDER=openai

# OpenAI配置（使用OpenAI时必需）⭐
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_MODEL=gpt-4
OPENAI_BASE_URL=https://api.openai.com/v1

# Anthropic配置（使用Anthropic时必需）
ANTHROPIC_API_KEY=
ANTHROPIC_MODEL=claude-3-sonnet-20240229

# 本地模型配置（使用本地模型时必需）
LOCAL_MODEL_URL=http://localhost:8080/v1
LOCAL_MODEL_NAME=codellama

# ==================== Git配置 ====================
# Git认证（用于自动提交到私有仓库，可选）
GIT_USERNAME=
GIT_TOKEN=
GIT_DEFAULT_BRANCH=main

# ==================== 工作目录 ====================
WORKSPACE_DIR=/app/workspace
REPORTS_DIR=/app/reports

# ==================== 日志配置 ====================
LOG_LEVEL=INFO
# 可选: DEBUG, INFO, WARNING, ERROR, CRITICAL

# ==================== 系统配置 ====================
# 默认覆盖率阈值（百分比）
DEFAULT_COVERAGE_THRESHOLD=80.0

# 测试自动修复配置 ✨
MAX_TEST_FIX_RETRIES=3
# AI自动修复测试的最大重试次数（1-5推荐）
ENABLE_AUTO_FIX=true
# 是否启用测试失败后的自动修复功能
MAX_CONCURRENT_GENERATIONS=15
# 并发生成测试文件的最大数量（推荐5-20）
SKIP_EXISTING_TESTS=true
# 是否跳过已存在的测试文件，直接运行和修复（推荐开启）

# 并发配置
MAX_CONCURRENT_TASKS=5
CELERY_WORKER_CONCURRENCY=4

# ==================== 快速配置指南 ====================
#
# 【最小配置】新手必改：
#   1. OPENAI_API_KEY - 填写你的OpenAI API密钥
#
# 【生产环境】额外必改：
#   1. POSTGRES_PASSWORD - 改为强密码
#   2. API_SECRET_KEY - 改为随机字符串
#   3. REDIS_PASSWORD - 设置Redis密码
#
# 【Git自动提交】如需要：
#   1. GIT_USERNAME - 你的GitHub用户名
#   2. GIT_TOKEN - GitHub Personal Access Token
#      生成方法: GitHub Settings → Developer settings → 
#                Personal access tokens → Generate new token
#      需要权限: repo (所有)
#
# 【其他AI提供商】可选：
#   - Claude: 设置 AI_PROVIDER=anthropic 和 ANTHROPIC_API_KEY
#   - 本地模型: 设置 AI_PROVIDER=local 和 LOCAL_MODEL_URL
#
# ==================== 示例配置 ====================
#
# 示例1: 使用OpenAI（最简单）
# OPENAI_API_KEY=sk-proj-xxxxxxxxxxxxx
# AI_PROVIDER=openai
#
# 示例2: 使用Claude
# ANTHROPIC_API_KEY=sk-ant-xxxxxxxxxxxxx
# AI_PROVIDER=anthropic
#
# 示例3: 使用本地LLM（如Ollama）
# LOCAL_MODEL_URL=http://localhost:11434/v1
# LOCAL_MODEL_NAME=codellama
# AI_PROVIDER=local
#
# ==================== 故障排查 ====================
#
# 问题1: API密钥错误
#   - 检查OPENAI_API_KEY是否正确
#   - 确认API密钥有效且有余额
#   - 查看日志: docker-compose logs api
#
# 问题2: 数据库连接失败
#   - 检查POSTGRES_PASSWORD是否一致
#   - 查看日志: docker-compose logs postgres
#   - 重启: docker-compose restart postgres
#
# 问题3: Git克隆失败
#   - 公共仓库无需配置GIT_USERNAME和GIT_TOKEN
#   - 私有仓库必须配置认证信息
#   - 检查Token权限是否包含repo
#
# ==================== 注意事项 ====================
#
# ⚠️ 安全提醒：
#   - .env文件包含敏感信息，不要提交到Git
#   - 已在.gitignore中排除.env文件
#   - 生产环境使用强密码和加密连接
#
# 📝 配置后：
#   1. 保存文件为 .env
#   2. 运行: docker-compose up -d
#   3. 验证: curl http://localhost:8000/health
#
# 🔗 获取帮助：
#   - 查看文档: README.md, QUICKSTART.md
#   - API文档: http://localhost:8000/docs
#   - Celery监控: http://localhost:5555

